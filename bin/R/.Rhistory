# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 3  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = "left")
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 2  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = "left")
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 5  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.8)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 6  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.9)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 6  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 4  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 5  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 4  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
rm(list = ls())
library(readr)
variant_qual_metrics_random <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_random.csv")
View(variant_qual_metrics_random)
library(readr)
variant_qual_metrics_random2 <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_random2.csv")
View(variant_qual_metrics_random2)
library(readr)
variant_qual_metrics_temp <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_temp.csv")
View(variant_qual_metrics_temp)
sum(unique(variant_qual_metrics_random$GeneName))
count(unique(variant_qual_metrics_random, vars=GeneName))
count(unique(variant_qual_metrics_random$GeneName))
unique(variant_qual_metrics_random$GeneName)
print(variant_qual_metrics_random$GeneName)
n_distinct(variant_qual_metrics_random$GeneName)
df = data.frame(variant_qual_metrics_random)
n_distinct(df$GeneName)
print("dsfljsa")
