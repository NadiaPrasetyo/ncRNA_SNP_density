values_to = "Count")
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.png", plot = snp155_plot, width = 7, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.png", plot = pangenome_plot, width = 7, height = 7)
# Combined histogram for both SNP155 Count and Pangenome Count
combined_plot <- ggplot(long_data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Count), stat = "identity") +
facet_wrap(~ CountType, scales = "free_y") +  # Separate facets for each count type
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.png", plot = combined_plot, width = 7, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count")
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 7, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 7, height = 7)
# Combined histogram for both SNP155 Count and Pangenome Count
combined_plot <- ggplot(long_data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Count), stat = "identity") +
facet_wrap(~ CountType, scales = "free_y") +  # Separate facets for each count type
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 7, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
group_by(Gene) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')  # Summarize to get total counts by gene
# Add mutation type back for fill aesthetics
long_data$Mutation <- "Combined"  # Add a dummy mutation type for coloring
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(long_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Stacked histogram for combined counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.png", plot = combined_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(long_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Calculate total counts for each mutation type
mutation_frequencies <- total_data %>%
group_by(Mutation) %>%
summarize(Mutation_Count = sum(Total_Count), .groups = 'drop')
# Calculate total count for all mutations
total_count_all <- sum(mutation_frequencies$Mutation_Count)
# Calculate ratios of each mutation type to the total count
mutation_frequencies <- mutation_frequencies %>%
mutate(Ratio = Mutation_Count / total_count_all)
# Save the mutation frequencies and ratios to a CSV file
write.csv(mutation_frequencies, "../../results/var_freq.csv", row.names = FALSE)
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
rm(list = ls())
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Calculate total counts for each mutation type
mutation_frequencies <- total_data %>%
group_by(Mutation) %>%
summarize(Mutation_Count = sum(Total_Count), .groups = 'drop')
# Calculate total count for all mutations
total_count_all <- sum(mutation_frequencies$Mutation_Count)
# Calculate ratios of each mutation type to the total count
mutation_frequencies <- mutation_frequencies %>%
mutate(Ratio = Mutation_Count / total_count_all)
# Save the mutation frequencies and ratios to a CSV file
write.csv(mutation_frequencies, "../../results/var_freq.csv", row.names = FALSE)
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
View(mutation_frequencies)
library(readr)
gene_hits_checkboard <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/results/gene_hits_checkboard.csv")
View(gene_hits_checkboard)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "firebrick1") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
print(heatmap_plot)
# Show plot
print(heatmap_plot)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 50, height = 50, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 25, height = 25, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 15, height = 15, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 15, height = 20, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 10, height = 20, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = Genome, y = `Gene name`, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genomes", y = "Genes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 15, height = 20, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = `Gene name`, y = Genome, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genes", y = "Genomes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 15, height = 20, limitsize = FALSE)
library(ggplot2)
library(reshape2)
library(readr)
# Load the data
csv_file <- "../../results/gene_hits_checkboard.csv"
gene_data <- read_csv(csv_file)
# Convert to long format for ggplot
melted_data <- melt(gene_data, id.vars = "Gene name", variable.name = "Genome", value.name = "Hits")
# Plot heatmap
heatmap_plot <- ggplot(melted_data, aes(x = `Gene name`, y = Genome, fill = Hits)) +
geom_tile() +
scale_fill_gradient(low = "cornflowerblue", high = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Gene Hits Heatmap", x = "Genes", y = "Genomes", fill = "Hits")
# Show plot
ggsave("../../results/Gene_hits_heatmap.pdf", plot = heatmap_plot, width = 25, height = 15, limitsize = FALSE)
