tissue_data <- filter(all_data, Tissue == tissue)
tissue_data <- tissue_data %>%
mutate(GeneType = ifelse(grepl("^Random\\d+", GeneName), "Random", "Gene")) %>%
mutate(GeneType = paste(Context, GeneType))
summary_stats <- tissue_data %>% group_by(GeneType) %>% summarise(
Median = median(Methylation_Percentage, na.rm = TRUE),
Mean = mean(Methylation_Percentage, na.rm = TRUE)
)
plot <- ggplot(tissue_data, aes(x = GeneType, y = Methylation_Percentage, color = Context)) +
geom_jitter(alpha = 0.7, size = 3, width = 0.1) +
geom_text(data = summary_stats, aes(x = GeneType, y = Mean, label = round(Mean, 2)), vjust = -1, color = "red") +
labs(
title = paste("Methylation Percentage in", tissue, "(CHH & CpG)"),
x = "Gene Type",
y = "Methylation Percentage"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(paste0("../../results/DNAme/", tissue, "_CpG_CHH_scatter_jitter_plot.pdf"), plot)
}
# Part 3: Individual gene analysis
filter_randoms <- function(gene, tissue_data) {
randoms <- tissue_data %>%
filter(
grepl("^Random\\d+", GeneName),
abs(Length - gene$Length) <= 200,
abs(Median_CG_Content - gene$Median_CG_Content) <= 20
)
return(randoms)
}
# Get unique gene names excluding "Random#" genes
genes <- unique(all_data$GeneName[!grepl("^Random\\d+", all_data$GeneName)])
for (gene in genes) {
gene_data <- filter(all_data, GeneName == gene)
all_gene_data <- data.frame(Tissue = character(), Methylation_Percentage = numeric(), GeneType = character(), Context = character())
for (tissue in tissues) {
tissue_data <- filter(all_data, Tissue == tissue)
for (context in c("CHH", "CpG")) {
context_data <- filter(tissue_data, Context == context)
randoms <- filter_randoms(gene_data[1, ], context_data)
all_gene_data <- bind_rows(
all_gene_data,
context_data %>% filter(GeneName == gene) %>% mutate(GeneType = paste(tissue, context)),
randoms %>% mutate(GeneType = paste(tissue, context, "random"))
)
}
}
if (nrow(all_gene_data) > 0) {
summary_stats <- all_gene_data %>% group_by(GeneType) %>% summarise(
Median = median(Methylation_Percentage, na.rm = TRUE),
Mean = mean(Methylation_Percentage, na.rm = TRUE)
)
plot <- ggplot(all_gene_data, aes(x = GeneType, y = Methylation_Percentage, color = GeneType)) +
geom_jitter(width = 0.2, alpha = 0.7) +
geom_text(data = summary_stats, aes(x = GeneType, y = Mean, label = round(Mean, 2)), vjust = -1, color = "red") +
labs(
title = paste(gene, "CHH & CpG vs Random"),
x = "Gene Type",
y = "Methylation Percentage"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(paste0("../../results/DNAme/", gene, "_CHH_CpG_individual_scatter_plot.pdf"), plot)
}
}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155 Count", "Pangenome Count"),
names_to = "CountType",
values_to = "Count")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count")
# Histogram for SNP155 Count
ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = `SNP155_Count`), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_brewer(palette = "Set3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave("../../results/snp155_count_frequency.png")  # Save the plot as PNG
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count")
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_brewer(palette = "Set3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.png", plot = snp155_plot, width = 7, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.png", plot = pangenome_plot, width = 7, height = 7)
# Combined histogram for both SNP155 Count and Pangenome Count
combined_plot <- ggplot(long_data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Count), stat = "identity") +
facet_wrap(~ CountType, scales = "free_y") +  # Separate facets for each count type
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Count") +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.png", plot = combined_plot, width = 7, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count")
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.png", plot = snp155_plot, width = 7, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.png", plot = pangenome_plot, width = 7, height = 7)
# Combined histogram for both SNP155 Count and Pangenome Count
combined_plot <- ggplot(long_data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Count), stat = "identity") +
facet_wrap(~ CountType, scales = "free_y") +  # Separate facets for each count type
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.png", plot = combined_plot, width = 7, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count")
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 7, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 7, height = 7)
# Combined histogram for both SNP155 Count and Pangenome Count
combined_plot <- ggplot(long_data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Count), stat = "identity") +
facet_wrap(~ CountType, scales = "free_y") +  # Separate facets for each count type
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 7, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
group_by(Gene) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')  # Summarize to get total counts by gene
# Add mutation type back for fill aesthetics
long_data$Mutation <- "Combined"  # Add a dummy mutation type for coloring
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(long_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Stacked histogram for combined counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.png", plot = combined_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(long_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Calculate total counts for each mutation type
mutation_frequencies <- total_data %>%
group_by(Mutation) %>%
summarize(Mutation_Count = sum(Total_Count), .groups = 'drop')
# Calculate total count for all mutations
total_count_all <- sum(mutation_frequencies$Mutation_Count)
# Calculate ratios of each mutation type to the total count
mutation_frequencies <- mutation_frequencies %>%
mutate(Ratio = Mutation_Count / total_count_all)
# Save the mutation frequencies and ratios to a CSV file
write.csv(mutation_frequencies, "../../results/var_freq.csv", row.names = FALSE)
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
rm(list = ls())
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)  # Load viridis for color palettes
# Read the CSV file
data <- read.csv("../../data/snp_frequencies.csv")  # Replace with your CSV file path
# Convert the data to long format for plotting
long_data <- data %>%
pivot_longer(cols = c("SNP155_Count", "Pangenome_Count"),
names_to = "CountType",
values_to = "Count") %>%
mutate(Mutation = as.factor(Mutation))  # Ensure Mutation is a factor
# Summarize the data to get the total counts for each gene and mutation type
total_data <- long_data %>%
group_by(Gene, Mutation) %>%
summarize(Total_Count = sum(Count), .groups = 'drop')
# Calculate total counts for each mutation type
mutation_frequencies <- total_data %>%
group_by(Mutation) %>%
summarize(Mutation_Count = sum(Total_Count), .groups = 'drop')
# Calculate total count for all mutations
total_count_all <- sum(mutation_frequencies$Mutation_Count)
# Calculate ratios of each mutation type to the total count
mutation_frequencies <- mutation_frequencies %>%
mutate(Ratio = Mutation_Count / total_count_all)
# Save the mutation frequencies and ratios to a CSV file
write.csv(mutation_frequencies, "../../results/var_freq.csv", row.names = FALSE)
# Histogram for SNP155 Count
snp155_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = SNP155_Count), stat = "identity") +
theme_minimal() +
labs(title = "SNP155 Count by Gene and Mutation",
x = "Gene",
y = "SNP155 Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the SNP155 Count plot
ggsave("../../results/snp155_count_frequency.pdf", plot = snp155_plot, width = 20, height = 7)
# Histogram for Pangenome Count
pangenome_plot <- ggplot(data, aes(x = Gene, fill = Mutation)) +
geom_bar(aes(y = Pangenome_Count), stat = "identity") +
theme_minimal() +
labs(title = "Pangenome Count by Gene and Mutation",
x = "Gene",
y = "Pangenome Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the Pangenome Count plot
ggsave("../../results/pangenome_count_frequency.pdf", plot = pangenome_plot, width = 20, height = 7)
# Combined histogram for total counts of SNP155 and Pangenome
combined_plot <- ggplot(total_data, aes(x = Gene, y = Total_Count, fill = Mutation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Combined SNP frequency for SNP155 and Pangenome Count",
x = "Gene",
y = "Total Count") +
scale_fill_viridis(discrete = TRUE) +  # Use viridis colors
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the combined histogram plot
ggsave("../../results/combined_frequency.pdf", plot = combined_plot, width = 20, height = 7)
View(mutation_frequencies)
