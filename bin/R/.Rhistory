filter(Dataset == "Dataset2") %>%
ggplot(aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene (SNP155)") +
scale_fill_brewer(palette = "YlOrRd") +
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))
# Save Dataset 2 Plot
ggsave("../../results/Variation-counts-SNP155-bar.pdf", plot = data2_plot, width = 15)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggtext)  # For colored text in ggplot
# Step 1: Load the CSV data for both datasets
data1 <- read.csv("../../results/gene_variation_summary.csv")
data2 <- read.csv("../../results/SNP_variation_summary.csv")
# Add a new column to indicate the dataset source
data1$Dataset <- "Dataset1"
data2$Dataset <- "Dataset2"
# Combine the two datasets
combined_data <- bind_rows(data1, data2)
# Step 2: Process the variation types and extract counts
# Split 'VARIATION_TYPES' into separate rows and extract counts and variation types
data_processed <- combined_data %>%
separate_rows(VARIATION_TYPES, sep = ", ") %>%  # Split by commas
mutate(
Variation_Type = str_extract(VARIATION_TYPES, "^[a-zA-Z]+"),  # Extract variation type (e.g., snp, mnp)
Count = as.numeric(str_extract(VARIATION_TYPES, "(?<=\\()\\d+(?=\\))"))  # Extract the count inside parentheses
) %>%
select(GENE, Variation_Type, Count, Dataset)
# Step 3: Summarize the total count for each variation type per gene and dataset
variation_counts <- data_processed %>%
group_by(GENE, Variation_Type, Dataset) %>%
summarise(Total_Variation_Count = sum(Count), .groups = 'drop')
# List of genes with special font color
special_genes <- c(
"FAM30A", "LINC01671", "lnc-SLCO4A1-8", "MIR4538", "SNAR-A1", "SNAR-B2",
"SNAR-C3", "SNAR-C4", "SNAR-G1", "SNAR-G2", "TRE-TTC5-1", "TRG-CCC6-1",
"TRG-CCC4-1", "TRV-CAC5-1"
)
# Modify the genes in the special list to use a markdown format for color
variation_counts$GENE <- ifelse(variation_counts$GENE %in% special_genes,
paste0("<span style='color:red;'>", variation_counts$GENE, "</span>"),
variation_counts$GENE)
# Step 1: Summarize the total variation count per gene across both datasets
gene_total_variation_counts <- variation_counts %>%
group_by(GENE) %>%
summarise(Total_Variation_Count = sum(Total_Variation_Count), .groups = 'drop')
# Step 2: Order the genes by the total variation count (descending)
ordered_gene_variation_counts <- gene_total_variation_counts %>%
arrange(desc(Total_Variation_Count))  # Sort by total variation count in descending order
# Step 3: Merge the ordered data back with the original dataset to maintain the variations and datasets
ordered_variation_counts <- variation_counts %>%
left_join(ordered_gene_variation_counts, by = "GENE") %>%
mutate(GENE = factor(GENE, levels = ordered_gene_variation_counts$GENE))  # Reorder the factor levels based on total count
# Step 4: Create the combined stacked bar plot with ordered genes
combined_plot <- ggplot(ordered_variation_counts, aes(x = GENE, y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot with ordered genes
ggsave("../../results/Variation-combined-counts-ordered-stacked-bar.pdf", plot = combined_plot, width = 15)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggtext)  # For colored text in ggplot
# Step 1: Load the CSV data for both datasets
data1 <- read.csv("../../results/gene_variation_summary.csv")
data2 <- read.csv("../../results/SNP_variation_summary.csv")
# Add a new column to indicate the dataset source
data1$Dataset <- "Dataset1"
data2$Dataset <- "Dataset2"
# Combine the two datasets
combined_data <- bind_rows(data1, data2)
# Step 2: Process the variation types and extract counts
# Split 'VARIATION_TYPES' into separate rows and extract counts and variation types
data_processed <- combined_data %>%
separate_rows(VARIATION_TYPES, sep = ", ") %>%  # Split by commas
mutate(
Variation_Type = str_extract(VARIATION_TYPES, "^[a-zA-Z]+"),  # Extract variation type (e.g., snp, mnp)
Count = as.numeric(str_extract(VARIATION_TYPES, "(?<=\\()\\d+(?=\\))"))  # Extract the count inside parentheses
) %>%
select(GENE, Variation_Type, Count, Dataset)
# Step 3: Summarize the total count for each variation type per gene and dataset
variation_counts <- data_processed %>%
group_by(GENE, Variation_Type, Dataset) %>%
summarise(Total_Variation_Count = sum(Count), .groups = 'drop')
# List of genes with special font color
special_genes <- c(
"FAM30A", "LINC01671", "lnc-SLCO4A1-8", "MIR4538", "SNAR-A1", "SNAR-B2",
"SNAR-C3", "SNAR-C4", "SNAR-G1", "SNAR-G2", "TRE-TTC5-1", "TRG-CCC6-1",
"TRG-CCC4-1", "TRV-CAC5-1"
)
# Modify the genes in the special list to use a markdown format for color
variation_counts$GENE <- ifelse(variation_counts$GENE %in% special_genes,
paste0("<span style='color:red;'>", variation_counts$GENE, "</span>"),
variation_counts$GENE)
# Step 4: Summarize the total variation count per gene across both datasets
gene_total_variation_counts <- variation_counts %>%
group_by(GENE) %>%
summarise(Total_Variation_Count = sum(Total_Variation_Count), .groups = 'drop')
# Step 5: Order the genes by the total variation count (descending)
ordered_gene_variation_counts <- gene_total_variation_counts %>%
arrange(desc(Total_Variation_Count))  # Sort by total variation count in descending order
# Step 6: Merge the ordered data back with the original dataset to maintain the variations and datasets
ordered_variation_counts <- variation_counts %>%
left_join(ordered_gene_variation_counts, by = "GENE") %>%
mutate(GENE = factor(GENE, levels = ordered_gene_variation_counts$GENE))  # Reorder the factor levels based on total count
# Step 7: Create the combined stacked bar plot with ordered genes
combined_plot <- ggplot(ordered_variation_counts, aes(x = GENE, y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot with ordered genes
ggsave("../../results/Variation-combined-counts-ordered-stacked-bar.pdf", plot = combined_plot, width = 15)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggtext)  # For colored text in ggplot
# Step 1: Load the CSV data for both datasets
data1 <- read.csv("../../results/gene_variation_summary.csv")
data2 <- read.csv("../../results/SNP_variation_summary.csv")
# Add a new column to indicate the dataset source
data1$Dataset <- "Dataset1"
data2$Dataset <- "Dataset2"
# Combine the two datasets
combined_data <- bind_rows(data1, data2)
# Step 2: Process the variation types and extract counts
# Split 'VARIATION_TYPES' into separate rows and extract counts and variation types
data_processed <- combined_data %>%
separate_rows(VARIATION_TYPES, sep = ", ") %>%  # Split by commas
mutate(
Variation_Type = str_extract(VARIATION_TYPES, "^[a-zA-Z]+"),  # Extract variation type (e.g., snp, mnp)
Count = as.numeric(str_extract(VARIATION_TYPES, "(?<=\\()\\d+(?=\\))"))  # Extract the count inside parentheses
) %>%
select(GENE, Variation_Type, Count, Dataset)
# Step 3: Summarize the total count for each variation type per gene and dataset
variation_counts <- data_processed %>%
group_by(GENE, Variation_Type, Dataset) %>%
summarise(NUM_VARIATIONS = sum(Count), .groups = 'drop')
# List of genes with special font color
special_genes <- c(
"FAM30A", "LINC01671", "lnc-SLCO4A1-8", "MIR4538", "SNAR-A1", "SNAR-B2",
"SNAR-C3", "SNAR-C4", "SNAR-G1", "SNAR-G2", "TRE-TTC5-1", "TRG-CCC6-1",
"TRG-CCC4-1", "TRV-CAC5-1"
)
# Modify the genes in the special list to use a markdown format for color
variation_counts$GENE <- ifelse(variation_counts$GENE %in% special_genes,
paste0("<span style='color:red;'>", variation_counts$GENE, "</span>"),
variation_counts$GENE)
# Step 4: Summarize the total variation count per gene across both datasets
gene_NUM_VARIATIONSs <- variation_counts %>%
group_by(GENE) %>%
summarise(NUM_VARIATIONS = sum(NUM_VARIATIONS), .groups = 'drop')
# Step 5: Order the genes by the total variation count (descending)
ordered_gene_variation_counts <- gene_NUM_VARIATIONSs %>%
arrange(desc(NUM_VARIATIONS))  # Sort by total variation count in descending order
# Step 6: Merge the ordered data back with the original dataset to maintain the variations and datasets
ordered_variation_counts <- variation_counts %>%
left_join(ordered_gene_variation_counts, by = "GENE") %>%
mutate(GENE = factor(GENE, levels = ordered_gene_variation_counts$GENE))  # Reorder the factor levels based on total count
# Step 7: Create the combined stacked bar plot with ordered genes
combined_plot <- ggplot(ordered_variation_counts, aes(x = GENE, y = NUM_VARIATIONS, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot with ordered genes
ggsave("../../results/Variation-combined-counts-ordered-stacked-bar.pdf", plot = combined_plot, width = 15)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggtext)  # For colored text in ggplot
# Step 1: Load the CSV data for both datasets
data1 <- read.csv("../../results/gene_variation_summary.csv")
data2 <- read.csv("../../results/SNP_variation_summary.csv")
# Add a new column to indicate the dataset source
data1$Dataset <- "Dataset1"
data2$Dataset <- "Dataset2"
# Combine the two datasets
combined_data <- bind_rows(data1, data2)
# Step 2: Process the variation types and extract counts
# Split 'VARIATION_TYPES' into separate rows and extract variation types and their counts
data_processed <- combined_data %>%
separate_rows(VARIATION_TYPES, sep = ", ") %>%  # Split by commas
mutate(
Variation_Type = str_extract(VARIATION_TYPES, "^[a-zA-Z]+"),  # Extract variation type (e.g., snv, ins, del)
Count = as.numeric(str_extract(VARIATION_TYPES, "(?<=\\()\\d+(?=\\))"))  # Extract the count inside parentheses
) %>%
select(GENE, Variation_Type, Count, Dataset, NUM_VARIATIONS)  # Keep NUM_VARIATIONS for total count
# Step 3: Summarize the total count for each variation type per gene and dataset
variation_counts <- data_processed %>%
group_by(GENE, Variation_Type, Dataset) %>%
summarise(Total_Variation_Count = sum(Count), .groups = 'drop')
# Step 4: Summarize the total variation count per gene across both datasets
gene_total_variation_counts <- variation_counts %>%
group_by(GENE) %>%
summarise(Total_Variation_Count = sum(Total_Variation_Count), .groups = 'drop')
# Step 5: Order the genes by the total variation count (descending)
ordered_gene_variation_counts <- gene_total_variation_counts %>%
arrange(desc(Total_Variation_Count))  # Sort by total variation count in descending order
# Step 6: Merge the ordered data back with the original dataset to maintain the variations and datasets
ordered_variation_counts <- variation_counts %>%
left_join(ordered_gene_variation_counts, by = "GENE") %>%
mutate(GENE = factor(GENE, levels = ordered_gene_variation_counts$GENE))  # Reorder the factor levels based on total count
# Step 7: Create the combined stacked bar plot with ordered genes
combined_plot <- ggplot(ordered_variation_counts, aes(x = GENE, y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot with ordered genes
ggsave("../../results/Variation-combined-counts-ordered-stacked-bar.pdf", plot = combined_plot, width = 15)
View(data2)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggtext)  # For colored text in ggplot
# Step 1: Load the CSV data for both datasets
data1 <- read.csv("../../results/gene_variation_summary.csv")
data2 <- read.csv("../../results/SNP_variation_summary.csv")
# Add a new column to indicate the dataset source
data1$Dataset <- "Dataset1"
data2$Dataset <- "Dataset2"
# Combine the two datasets
combined_data <- bind_rows(data1, data2)
# Step 2: Process the variation types and extract counts
# Split 'VARIATION_TYPES' into separate rows, extract variation types and their counts
data_processed <- combined_data %>%
separate_rows(VARIATION_TYPES, sep = ", ") %>%  # Split by commas
mutate(
Variation_Type = str_extract(VARIATION_TYPES, "^[a-zA-Z]+"),  # Extract variation type (e.g., snv, ins, del)
Count = as.numeric(str_extract(VARIATION_TYPES, "(?<=\\()\\d+(?=\\))"))  # Extract the count inside parentheses
) %>%
select(GENE, Variation_Type, Count, Dataset, NUM_VARIATIONS)  # Keep NUM_VARIATIONS for total count
# List of genes with special font color
special_genes <- c(
"FAM30A", "LINC01671", "lnc-SLCO4A1-8", "MIR4538", "SNAR-A1", "SNAR-B2",
"SNAR-C3", "SNAR-C4", "SNAR-G1", "SNAR-G2", "TRE-TTC5-1", "TRG-CCC6-1",
"TRG-CCC4-1", "TRV-CAC5-1"
)
# Modify the genes in the special list to use a markdown format for color
data_processed$GENE <- ifelse(data_processed$GENE %in% special_genes,
paste0("<span style='color:red;'>", data_processed$GENE, "</span>"),
data_processed$GENE)
# Step 3: Order the genes by NUM_VARIATIONS (total count of variations for each gene)
ordered_gene_variation_counts <- data_processed %>%
group_by(GENE) %>%
summarise(Total_Variation_Count = first(NUM_VARIATIONS), .groups = 'drop') %>%
arrange(desc(Total_Variation_Count))  # Sort by total variation count in descending order
# Step 4: Merge the ordered data back with the variation data to maintain the order
ordered_variation_counts <- data_processed %>%
left_join(ordered_gene_variation_counts, by = "GENE") %>%
mutate(GENE = factor(GENE, levels = ordered_gene_variation_counts$GENE))  # Reorder the factor levels based on total count
# Step 5: Create the combined stacked bar plot with ordered genes
combined_plot <- ggplot(ordered_variation_counts, aes(x = GENE, y = Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot with ordered genes
ggsave("../../results/Variation-combined-counts-ordered-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 6: Create separate stacked bar plots for each dataset with ordered genes
# Dataset 1 Plot
data1_plot <- ordered_variation_counts %>%
filter(Dataset == "Dataset1") %>%
ggplot(aes(x = GENE, y = Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Gene", y = "Variation Count", title = "Variation Counts by Type for Each Gene (Pangenome)") +
scale_fill_brewer(palette = "YlGnBu") +
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))
# Save Dataset 1 Plot
ggsave("../../results/Variation-counts-pangenome-ordered-bar.pdf", plot = data1_plot, width = 15)
# Dataset 2 Plot
data2_plot <- ordered_variation_counts %>%
filter(Dataset == "Dataset2") %>%
ggplot(aes(x = GENE, y = Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Gene", y = "Variation Count", title = "Variation Counts by Type for Each Gene (SNP155)") +
scale_fill_brewer(palette = "YlOrRd") +
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))
# Save Dataset 2 Plot
ggsave("../../results/Variation-counts-SNP155-ordered-bar.pdf", plot = data2_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
scale_y_continuous(trans = "log2") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count (log2 scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
scale_y_continuous(trans = "log2") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count (log2 scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count (log10 scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 20)
# Step 4: Create the combined stacked bar plot (both datasets)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count (log10 scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Step 4: Create the combined stacked bar plot (both datasets)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = position_dodge(), aes(group = Dataset)) +  # Side-by-side stacks for datasets
labs(x = "Gene", y = "Total Variation Count (log10 scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_brewer(palette = "Set3") +  # Optional: Choose color palette for fill
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 20)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Dataset)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Side-by-side bars for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_manual(values = c("Dataset1" = "lightgreen", "Dataset2" = "pink")) +  # Custom colors for datasets
scale_y_continuous(trans = "log2") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 20)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Dataset)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_manual(values = c("Dataset1" = "lightgreen", "Dataset2" = "pink")) +  # Custom colors for datasets
scale_y_continuous(trans = "log2") +  # Set y-axis to log2 scale
theme_minimal() +
theme(
axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Dataset)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count (Log scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_manual(values = c("Dataset1" = "lightgreen", "Dataset2" = "pink")) +  # Custom colors for datasets
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggtext)  # For colored text in ggplot
# Step 1: Load the CSV data for both datasets
data1 <- read.csv("../../results/gene_variation_summary.csv")
data2 <- read.csv("../../results/SNP_variation_summary.csv")
# Add a new column to indicate the dataset source
data1$Dataset <- "Dataset1"
data2$Dataset <- "Dataset2"
# Combine the two datasets
combined_data <- bind_rows(data1, data2)
# Step 2: Process the variation types and extract counts
# Split 'VARIATION_TYPES' into separate rows and extract counts and variation types
data_processed <- combined_data %>%
separate_rows(VARIATION_TYPES, sep = ", ") %>%  # Split by commas
mutate(
Variation_Type = str_extract(VARIATION_TYPES, "^[a-zA-Z]+"),  # Extract variation type (e.g., snp, mnp)
Count = as.numeric(str_extract(VARIATION_TYPES, "(?<=\\()\\d+(?=\\))"))  # Extract the count inside parentheses
) %>%
select(GENE, Variation_Type, Count, Dataset)
# Step 3: Summarize the total count for each variation type per gene and dataset
variation_counts <- data_processed %>%
group_by(GENE, Variation_Type, Dataset) %>%
summarise(Total_Variation_Count = sum(Count), .groups = 'drop')
# List of genes with special font color
special_genes <- c(
"FAM30A", "LINC01671", "lnc-SLCO4A1-8", "MIR4538", "SNAR-A1", "SNAR-B2",
"SNAR-C3", "SNAR-C4", "SNAR-G1", "SNAR-G2", "TRE-TTC5-1", "TRG-CCC6-1",
"TRG-CCC4-1", "TRV-CAC5-1"
)
# Modify the genes in the special list to use a markdown format for color
variation_counts$GENE <- ifelse(variation_counts$GENE %in% special_genes,
paste0("<span style='color:red;'>", variation_counts$GENE, "</span>"),
variation_counts$GENE)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count (Log scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_fill_manual(values = c("Dataset1" = "lightgreen", "Dataset2" = "pink")) +  # Custom colors for datasets
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 5: Create separate stacked bar plots for each dataset
# Dataset 1 Plot
data1_plot <- variation_counts %>%
filter(Dataset == "Dataset1") %>%
ggplot(aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene (Pangenome)") +
scale_fill_brewer(palette = "YlGnBu") +
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))
# Save Dataset 1 Plot
ggsave("../../results/Variation-counts-pangenome-bar.pdf", plot = data1_plot, width = 15)
# Dataset 2 Plot
data2_plot <- variation_counts %>%
filter(Dataset == "Dataset2") %>%
ggplot(aes(x = reorder(GENE, -Total_Variation_Count), y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Gene", y = "Total Variation Count", title = "Variation Counts by Type for Each Gene (SNP155)") +
scale_fill_brewer(palette = "YlOrRd") +
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))
# Save Dataset 2 Plot
ggsave("../../results/Variation-counts-SNP155-bar.pdf", plot = data2_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count (Log scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 90, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count (Log scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count (Log scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
scale_fill_manual(values = c("Dataset1" = "lightgreen", "Dataset2" = "pink")) +  # Custom colors for datasets
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
# Step 4: Create the combined stacked bar plot (both datasets stacked)
combined_plot <- ggplot(variation_counts, aes(x = reorder(GENE, -Total_Variation_Count),
y = Total_Variation_Count, fill = Variation_Type)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bars for datasets
labs(x = "Gene", y = "Total Variation Count (Log scale)", title = "Variation Counts by Type for Each Gene across Datasets") +
scale_y_continuous(trans = "log10") +  # Set y-axis to log2 scale
theme_minimal() +
theme(axis.text.x = ggtext::element_markdown(size = 7, angle = 45, hjust = 1))  # Use markdown to allow coloring
# Save the combined plot
ggsave("../../results/Variation-combined-counts-stacked-bar.pdf", plot = combined_plot, width = 15)
