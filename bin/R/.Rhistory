ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 6  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 4  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 5  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
for (gene in genes) {
# Filter data for the specific gene
gene_data <- long_data %>% filter(GeneName == gene)
# Set metric order
gene_data$Metric <- factor(gene_data$Metric, levels = metric_order)
# Create list to store individual heatmaps
heatmap_list <- list()
metric_labels <- list()  # Store metric labels
# Generate a separate heatmap for each metric
for (metric in metric_order) {
# Filter data for the current metric
metric_data <- gene_data %>% filter(Metric == metric)
# Pivot data to wide format
metric_data_wide <- metric_data %>%
select(Variation_ID, Metric, Value_log) %>%
spread(key = "Variation_ID", value = "Value_log")
# Create matrix
metric_matrix <- as.matrix(metric_data_wide[, -1])  # Exclude Metric column
rownames(metric_matrix) <- metric_data_wide$Metric  # Set row names
# Skip if matrix has NA values
if (any(is.na(metric_matrix))) {
warning(paste("Skipped gene:", gene, "metric:", metric, "- Contains NA values"))
next
}
# Generate heatmap for the metric
p <- pheatmap(metric_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = FALSE,
color = heatmap_colors,
na_col = "grey",
legend = TRUE,
breaks = seq(min(metric_matrix, na.rm = TRUE),
max(metric_matrix, na.rm = TRUE),
length.out = 101),
show_rownames = FALSE,  # Keep off to maintain uniformity
show_colnames = FALSE,  # Removed X-axis labels
silent = TRUE,          # Silent to prevent auto-plotting
height = 4,             # Fixed height for each heatmap
width = 6)              # Fixed width for each heatmap
# Store heatmap as a grob
heatmap_list[[metric]] <- p$gtable
metric_labels[[metric]] <- metric  # Store metric name
}
# Combine heatmaps vertically
combined_plot <- arrangeGrob(grobs = heatmap_list, ncol = 1)
# Prepare formatted metric labels with gaps
label_spacing <- 4  # Adjust for more/less space
formatted_labels <- unlist(lapply(metric_labels, function(lbl) {
paste0(strrep("\n", label_spacing), lbl)
}))
# Overlay metric labels on the right side of each heatmap with spacing
combined_plot_with_labels <- grid.arrange(
combined_plot,
top = textGrob(paste(gene, "Quality Metrics GnoMAD"), gp = gpar(fontsize = 20, fontface = "bold")),
right = textGrob(paste(formatted_labels, collapse = ""),
gp = gpar(fontsize = 12, fontface = "bold"),
rot = 0,
just = 0.5)
)
# Save the combined heatmap with title and labels
heatmap_file <- paste0("../../results/qual_metrics/heatmap_quality_", gene, ".pdf")
ggsave(heatmap_file, combined_plot_with_labels, width = 15, height = 1 * length(heatmap_list) + 1, units = "in")
}
rm(list = ls())
library(readr)
variant_qual_metrics_random <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_random.csv")
View(variant_qual_metrics_random)
library(readr)
variant_qual_metrics_random2 <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_random2.csv")
View(variant_qual_metrics_random2)
library(readr)
variant_qual_metrics_temp <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_temp.csv")
View(variant_qual_metrics_temp)
sum(unique(variant_qual_metrics_random$GeneName))
count(unique(variant_qual_metrics_random, vars=GeneName))
count(unique(variant_qual_metrics_random$GeneName))
unique(variant_qual_metrics_random$GeneName)
print(variant_qual_metrics_random$GeneName)
n_distinct(variant_qual_metrics_random$GeneName)
df = data.frame(variant_qual_metrics_random)
n_distinct(df$GeneName)
print("dsfljsa")
print("dsfljsa")
n_distinct(df$GeneName)
count(unique(variant_qual_metrics_random$GeneName))
count(unique(variant_qual_metrics_random, vars=GeneName))
library(dplyr)
n_distinct(variant_qual_metrics_random$GeneName)
n_distinct(variant_qual_metrics_random2$GeneName)
n_distinct(variant_qual_metrics_temp$GeneName)
rm(list =ls())
library(readr)
variant_qual_metrics_random <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_random.csv")
View(variant_qual_metrics_random)
n_distinct(variant_qual_metrics_random$GeneName)
duplicated(variant_qual_metrics_random$GeneName)
duplicated(variant_qual_metrics_random$Variation_ID)
variant_qual_metrics_random[duplicated(variant_qual_metrics_random$Variation_ID) | duplicated(variant_qual_metrics_random$Variation_ID, fromLast=TRUE)]
data <- variant_qual_metrics_random[duplicated(variant_qual_metrics_random$Variation_ID)]
rlang::last_trace()
# Corrected Code
duplicate_rows <- variant_qual_metrics_random[duplicated(variant_qual_metrics_random$Variation_ID) |
duplicated(variant_qual_metrics_random$Variation_ID, fromLast = TRUE), ]
# Print the duplicate rows
print(duplicate_rows)
View(duplicate_rows)
rm(list=ls())
count(unique(variant_qual_metrics_random$GeneName))
n_distinct(variant_qual_metrics_random$GeneName)
library(readr)
variant_qual_metrics_random <- read_csv("//wsl.localhost/Ubuntu/home/nadia/ncRNA_SNP_density/data/variant_qual_metrics_random.csv")
View(variant_qual_metrics_random)
n_distinct(variant_qual_metrics_random$GeneName)
# Load required libraries
library(ggplot2)
library(reshape2)
library(pheatmap)
library(dplyr)
library(gridExtra)
library(grid)
# Set paths to data files
gene_data_path <- "../../data/variant_qual_metrics.csv"
random_data_path <- "../../data/variant_qual_metrics_random.csv"
# Read data from CSV files
gene_data <- read.csv(gene_data_path, stringsAsFactors = FALSE)
random_data <- read.csv(random_data_path, stringsAsFactors = FALSE)
# Select and clean numeric columns
numeric_columns <- c("Mean_Coverage", "Allele.frequency", "popmax_af", "SiteQuality", "AS_FS", "AS_MQRankSum", "AS_pab_max", "AS_ReadPosRankSum", "AS_SOR", "AS_VarDP")
gene_data[numeric_columns] <- lapply(gene_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
random_data[numeric_columns] <- lapply(random_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
# Remove rows with NA values
gene_data <- gene_data %>% filter(complete.cases(.))
random_data <- random_data %>% filter(complete.cases(.))
# Perform KS Test for each metric
ks_results <- list()
for (metric in numeric_columns) {
ks_test <- ks.test(gene_data[[metric]], random_data[[metric]])
ks_results[[metric]] <- ks_test
}
# Distribution plot comparison
metrics <- numeric_columns
for (metric in metrics) {
combined_data <- rbind(
data.frame(Value = gene_data[[metric]], Type = "Gene"),
data.frame(Value = random_data[[metric]], Type = "Random")
)
p <- ggplot(combined_data, aes(x = Value, fill = Type)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.6, bins = 30) +
geom_density(alpha = 0.7) +
labs(title = paste("Distribution of", metric, "(Gene vs Random)"), x = metric, y = "Density") +
theme_minimal()
ggsave(paste0("../../results/qual_metrics/comparison_", metric, ".pdf"), plot = p)
}
# Save KS test results
sink("../../results/qual_metrics/ks_test_results.txt")
for (metric in names(ks_results)) {
cat("Metric:", metric, "\n")
print(ks_results[[metric]])
cat("\n-----------------------\n")
}
sink()
# Load required libraries
library(ggplot2)
library(reshape2)
library(pheatmap)
library(dplyr)
library(gridExtra)
library(grid)
# Set paths to data files
gene_data_path <- "../../data/variant_qual_metrics.csv"
random_data_path <- "../../data/variant_qual_metrics_random.csv"
# Read data from CSV files
gene_data <- read.csv(gene_data_path, stringsAsFactors = FALSE)
random_data <- read.csv(random_data_path, stringsAsFactors = FALSE)
# Select and clean numeric columns
numeric_columns <- c("Mean_Coverage", "Allele.frequency", "popmax_af", "SiteQuality", "AS_FS", "AS_MQRankSum", "AS_pab_max", "AS_ReadPosRankSum", "AS_SOR", "AS_VarDP")
gene_data[numeric_columns] <- lapply(gene_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
random_data[numeric_columns] <- lapply(random_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
# Remove rows with NA values
gene_data <- gene_data %>% filter(complete.cases(.))
random_data <- random_data %>% filter(complete.cases(.))
# Apply log transformation
log_transform_metrics <- c("Allele.frequency", "SiteQuality", "AS_VarDP", "popmax_af")
gene_data[log_transform_metrics] <- lapply(gene_data[log_transform_metrics], function(x) log(x + 1))
random_data[log_transform_metrics] <- lapply(random_data[log_transform_metrics], function(x) log(x + 1))
# Perform KS Test for each metric
ks_results <- data.frame(Metric = character(), Statistic = numeric(), P_Value = numeric())
for (metric in numeric_columns) {
ks_test <- ks.test(gene_data[[metric]], random_data[[metric]])
ks_results <- rbind(ks_results, data.frame(Metric = metric, Statistic = ks_test$statistic, P_Value = ks_test$p.value))
}
# Save KS test results to CSV
write.csv(ks_results, "../../results/qual_metrics/qual_metric_comparison_ks_test_results.csv", row.names = FALSE)
# Distribution plot comparison
metrics <- numeric_columns
for (metric in metrics) {
combined_data <- rbind(
data.frame(Value = gene_data[[metric]], Type = "Gene"),
data.frame(Value = random_data[[metric]], Type = "Random")
)
p <- ggplot(combined_data, aes(x = Value, fill = Type)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.6, bins = 30) +
geom_density(alpha = 0.7) +
labs(title = paste("Distribution of", metric, "(Gene vs Random)"), x = metric, y = "Density") +
theme_minimal()
ggsave(paste0("../../results/qual_metrics/comparison_", metric, ".pdf"), plot = p)
}
View(variant_qual_metrics_random)
View(ks_results)
View(ks_test)
View(ks_results)
# Load required libraries
library(ggplot2)
library(reshape2)
library(pheatmap)
library(dplyr)
library(gridExtra)
library(grid)
# Set paths to data files
gene_data_path <- "../../data/variant_qual_metrics.csv"
random_data_path <- "../../data/variant_qual_metrics_random.csv"
# Read data from CSV files
gene_data <- read.csv(gene_data_path, stringsAsFactors = FALSE)
random_data <- read.csv(random_data_path, stringsAsFactors = FALSE)
# Select and clean numeric columns
numeric_columns <- c("Mean_Coverage", "Allele.frequency", "popmax_af", "SiteQuality", "AS_FS", "AS_MQRankSum", "AS_pab_max", "AS_ReadPosRankSum", "AS_SOR", "AS_VarDP")
gene_data[numeric_columns] <- lapply(gene_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
random_data[numeric_columns] <- lapply(random_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
# Remove rows with NA values
gene_data <- gene_data %>% filter(complete.cases(.))
random_data <- random_data %>% filter(complete.cases(.))
# Apply log transformation
log_transform_metrics <- c("Allele.frequency", "SiteQuality", "AS_VarDP", "popmax_af")
gene_data[log_transform_metrics] <- lapply(gene_data[log_transform_metrics], function(x) log10(x + 1))
random_data[log_transform_metrics] <- lapply(random_data[log_transform_metrics], function(x) log10(x + 1))
# Perform KS Test for each metric (including log-transformed for SiteQuality and AS_VarDP)
ks_results <- data.frame(Metric = character(), Statistic = numeric(), P_Value = numeric())
for (metric in numeric_columns) {
if (metric %in% c("SiteQuality", "AS_VarDP")) {
ks_test <- ks.test(gene_data[[metric]], random_data[[metric]])
log_ks_test <- ks.test(log10(gene_data[[metric]] + 1), log10(random_data[[metric]] + 1))
ks_results <- rbind(ks_results,
data.frame(Metric = paste(metric, "(raw)"), Statistic = ks_test$statistic, P_Value = ks_test$p.value),
data.frame(Metric = paste(metric, "(log10)"), Statistic = log_ks_test$statistic, P_Value = log_ks_test$p.value))
} else {
ks_test <- ks.test(gene_data[[metric]], random_data[[metric]])
ks_results <- rbind(ks_results, data.frame(Metric = metric, Statistic = ks_test$statistic, P_Value = ks_test$p.value))
}
}
# Save KS test results to CSV
write.csv(ks_results, "../../results/qual_metrics/ks_test_results.csv", row.names = FALSE)
# Distribution plot comparison
metrics <- numeric_columns
for (metric in metrics) {
combined_data <- rbind(
data.frame(Value = gene_data[[metric]], Type = "Gene"),
data.frame(Value = random_data[[metric]], Type = "Random")
)
# Adjust plot title for log-transformed metrics
x_label <- ifelse(metric %in% log_transform_metrics, paste("Log10-transformed", metric), metric)
# Adjust for density plot when most values are zeros
p <- ggplot(combined_data, aes(x = Value, fill = Type)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.6, bins = 30) +
geom_density(alpha = 0.7, adjust = 1.5) +  # Smoothing factor added
labs(title = paste("Distribution of", metric, "(Gene vs Random)"), x = x_label, y = "Density") +
theme_minimal()
ggsave(paste0("../../results/qual_metrics/comparison_", metric, ".pdf"), plot = p)
}
# Load required libraries
library(ggplot2)
library(reshape2)
library(pheatmap)
library(dplyr)
library(gridExtra)
library(grid)
# Set paths to data files
gene_data_path <- "../../data/variant_qual_metrics.csv"
random_data_path <- "../../data/variant_qual_metrics_random.csv"
# Read data from CSV files
gene_data <- read.csv(gene_data_path, stringsAsFactors = FALSE)
random_data <- read.csv(random_data_path, stringsAsFactors = FALSE)
# Select and clean numeric columns
numeric_columns <- c("Mean_Coverage", "Allele.frequency", "popmax_af", "SiteQuality", "AS_FS", "AS_MQRankSum", "AS_pab_max", "AS_ReadPosRankSum", "AS_SOR", "AS_VarDP")
gene_data[numeric_columns] <- lapply(gene_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
random_data[numeric_columns] <- lapply(random_data[numeric_columns], function(x) suppressWarnings(as.numeric(as.character(x))))
# Remove rows with NA values
gene_data <- gene_data %>% filter(complete.cases(.))
random_data <- random_data %>% filter(complete.cases(.))
# Apply log transformation
log_transform_metrics <- c("Allele.frequency", "SiteQuality", "AS_VarDP", "popmax_af")
gene_data[log_transform_metrics] <- lapply(gene_data[log_transform_metrics], function(x) log10(x + 1))
random_data[log_transform_metrics] <- lapply(random_data[log_transform_metrics], function(x) log10(x + 1))
# Perform KS Test for each metric
ks_results <- data.frame(Metric = character(), Statistic = numeric(), P_Value = numeric())
for (metric in numeric_columns) {
ks_test <- ks.test(gene_data[[metric]], random_data[[metric]])
ks_results <- rbind(ks_results, data.frame(Metric = metric, Statistic = ks_test$statistic, P_Value = ks_test$p.value))
}
# Save KS test results to CSV
write.csv(ks_results, "../../results/qual_metrics/ks_test_results.csv", row.names = FALSE)
# Distribution plot comparison
metrics <- numeric_columns
for (metric in metrics) {
combined_data <- rbind(
data.frame(Value = gene_data[[metric]], Type = "Gene"),
data.frame(Value = random_data[[metric]], Type = "Random")
)
# Adjust plot title for log-transformed metrics
x_label <- ifelse(metric %in% log_transform_metrics, paste("Log10-transformed", metric), metric)
# Adjust for density plot when most values are zeros
p <- ggplot(combined_data, aes(x = Value, fill = Type)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.6, bins = 30) +
geom_density(alpha = 0.7, adjust = 1.5) +  # Smoothing factor added
labs(title = paste("Distribution of", metric, "(Gene vs Random)"), x = x_label, y = "Density") +
theme_minimal()
ggsave(paste0("../../results/qual_metrics/comparison_", metric, ".pdf"), plot = p)
}
